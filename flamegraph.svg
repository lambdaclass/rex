<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="630" onload="init(evt)" viewBox="0 0 1200 630" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="630" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="613.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="613.00"> </text><svg id="frames" x="10" width="1180" total_samples="68835"><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (7 samples, 0.01%)</title><rect x="0.0087%" y="421" width="0.0102%" height="15" fill="rgb(227,0,7)" fg:x="6" fg:w="7"/><text x="0.2587%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`_free (48 samples, 0.07%)</title><rect x="0.2862%" y="405" width="0.0697%" height="15" fill="rgb(217,0,24)" fg:x="197" fg:w="48"/><text x="0.5362%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (11 samples, 0.02%)</title><rect x="0.3559%" y="405" width="0.0160%" height="15" fill="rgb(221,193,54)" fg:x="245" fg:w="11"/><text x="0.6059%" y="415.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (132 samples, 0.19%)</title><rect x="0.3806%" y="405" width="0.1918%" height="15" fill="rgb(248,212,6)" fg:x="262" fg:w="132"/><text x="0.6306%" y="415.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexdrop (9,732 samples, 14.14%)</title><rect x="0.7002%" y="389" width="14.1382%" height="15" fill="rgb(208,68,35)" fg:x="482" fg:w="9732"/><text x="0.9502%" y="399.50">libsystem_kernel.dyli..</text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_unlock_slow (9,819 samples, 14.26%)</title><rect x="0.5796%" y="405" width="14.2645%" height="15" fill="rgb(232,128,0)" fg:x="399" fg:w="9819"/><text x="0.8296%" y="415.50">libsystem_pthread.dyli..</text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (455 samples, 0.66%)</title><rect x="14.8500%" y="405" width="0.6610%" height="15" fill="rgb(207,160,47)" fg:x="10222" fg:w="455"/><text x="15.1000%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (10 samples, 0.01%)</title><rect x="15.7507%" y="389" width="0.0145%" height="15" fill="rgb(228,23,34)" fg:x="10842" fg:w="10"/><text x="16.0007%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`_free (72 samples, 0.10%)</title><rect x="15.7652%" y="389" width="0.1046%" height="15" fill="rgb(218,30,26)" fg:x="10852" fg:w="72"/><text x="16.0152%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (117 samples, 0.17%)</title><rect x="15.8698%" y="389" width="0.1700%" height="15" fill="rgb(220,122,19)" fg:x="10924" fg:w="117"/><text x="16.1198%" y="399.50"></text></g><g><title>libsystem_platform.dylib`__bzero (9 samples, 0.01%)</title><rect x="16.0471%" y="389" width="0.0131%" height="15" fill="rgb(250,228,42)" fg:x="11046" fg:w="9"/><text x="16.2971%" y="399.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (25 samples, 0.04%)</title><rect x="16.0601%" y="389" width="0.0363%" height="15" fill="rgb(240,193,28)" fg:x="11055" fg:w="25"/><text x="16.3101%" y="399.50"></text></g><g><title>rex`&lt;[V] as alloc::slice::Concat&lt;T&gt;&gt;::concat (33 samples, 0.05%)</title><rect x="16.0965%" y="389" width="0.0479%" height="15" fill="rgb(216,20,37)" fg:x="11080" fg:w="33"/><text x="16.3465%" y="399.50"></text></g><g><title>rex`&lt;tiny_keccak::keccak::Keccak as tiny_keccak::Hasher&gt;::finalize (17 samples, 0.02%)</title><rect x="16.1444%" y="389" width="0.0247%" height="15" fill="rgb(206,188,39)" fg:x="11113" fg:w="17"/><text x="16.3944%" y="399.50"></text></g><g><title>rex`&lt;tiny_keccak::keccak::Keccak as tiny_keccak::Hasher&gt;::update (78 samples, 0.11%)</title><rect x="16.1691%" y="389" width="0.1133%" height="15" fill="rgb(217,207,13)" fg:x="11130" fg:w="78"/><text x="16.4191%" y="399.50"></text></g><g><title>rex`DYLD-STUB$$free (8 samples, 0.01%)</title><rect x="16.2824%" y="389" width="0.0116%" height="15" fill="rgb(231,73,38)" fg:x="11208" fg:w="8"/><text x="16.5324%" y="399.50"></text></g><g><title>rex`&lt;primitive_types::H160 as core::fmt::LowerHex&gt;::fmt (21 samples, 0.03%)</title><rect x="16.3638%" y="373" width="0.0305%" height="15" fill="rgb(225,20,46)" fg:x="11264" fg:w="21"/><text x="16.6138%" y="383.50"></text></g><g><title>rex`&lt;&amp;T as core::fmt::LowerHex&gt;::fmt (137 samples, 0.20%)</title><rect x="17.2630%" y="341" width="0.1990%" height="15" fill="rgb(210,31,41)" fg:x="11883" fg:w="137"/><text x="17.5130%" y="351.50"></text></g><g><title>rex`core::fmt::num::_&lt;impl core::fmt::LowerHex for i8&gt;::fmt (71 samples, 0.10%)</title><rect x="17.4620%" y="341" width="0.1031%" height="15" fill="rgb(221,200,47)" fg:x="12020" fg:w="71"/><text x="17.7120%" y="351.50"></text></g><g><title>rex`&lt;alloc::string::String as core::fmt::Write&gt;::write_str (199 samples, 0.29%)</title><rect x="19.5540%" y="325" width="0.2891%" height="15" fill="rgb(226,26,5)" fg:x="13460" fg:w="199"/><text x="19.8040%" y="335.50"></text></g><g><title>rex`core::fmt::Formatter::pad_integral (428 samples, 0.62%)</title><rect x="19.8431%" y="325" width="0.6218%" height="15" fill="rgb(249,33,26)" fg:x="13659" fg:w="428"/><text x="20.0931%" y="335.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (486 samples, 0.71%)</title><rect x="22.4392%" y="309" width="0.7060%" height="15" fill="rgb(235,183,28)" fg:x="15446" fg:w="486"/><text x="22.6892%" y="319.50"></text></g><g><title>rex`&lt;alloc::string::String as core::fmt::Write&gt;::write_char (17 samples, 0.02%)</title><rect x="23.1452%" y="309" width="0.0247%" height="15" fill="rgb(221,5,38)" fg:x="15932" fg:w="17"/><text x="23.3952%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (51 samples, 0.07%)</title><rect x="24.4367%" y="277" width="0.0741%" height="15" fill="rgb(247,18,42)" fg:x="16821" fg:w="51"/><text x="24.6867%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (47 samples, 0.07%)</title><rect x="24.5108%" y="277" width="0.0683%" height="15" fill="rgb(241,131,45)" fg:x="16872" fg:w="47"/><text x="24.7608%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`realloc (26 samples, 0.04%)</title><rect x="24.5834%" y="277" width="0.0378%" height="15" fill="rgb(249,31,29)" fg:x="16922" fg:w="26"/><text x="24.8334%" y="287.50"></text></g><g><title>rex`DYLD-STUB$$malloc (9 samples, 0.01%)</title><rect x="24.6212%" y="277" width="0.0131%" height="15" fill="rgb(225,111,53)" fg:x="16948" fg:w="9"/><text x="24.8712%" y="287.50"></text></g><g><title>rex`DYLD-STUB$$realloc (26 samples, 0.04%)</title><rect x="24.6343%" y="277" width="0.0378%" height="15" fill="rgb(238,160,17)" fg:x="16957" fg:w="26"/><text x="24.8843%" y="287.50"></text></g><g><title>rex`_RNvCscSpY9Juk0HT_7___rustc11___rdl_alloc (14 samples, 0.02%)</title><rect x="24.6720%" y="277" width="0.0203%" height="15" fill="rgb(214,148,48)" fg:x="16983" fg:w="14"/><text x="24.9220%" y="287.50"></text></g><g><title>rex`_RNvCscSpY9Juk0HT_7___rustc13___rdl_realloc (17 samples, 0.02%)</title><rect x="24.6924%" y="277" width="0.0247%" height="15" fill="rgb(232,36,49)" fg:x="16997" fg:w="17"/><text x="24.9424%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (19 samples, 0.03%)</title><rect x="24.8318%" y="261" width="0.0276%" height="15" fill="rgb(209,103,24)" fg:x="17093" fg:w="19"/><text x="25.0818%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memmove (12 samples, 0.02%)</title><rect x="25.4783%" y="229" width="0.0174%" height="15" fill="rgb(229,88,8)" fg:x="17538" fg:w="12"/><text x="25.7283%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (49 samples, 0.07%)</title><rect x="25.4958%" y="229" width="0.0712%" height="15" fill="rgb(213,181,19)" fg:x="17550" fg:w="49"/><text x="25.7458%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (185 samples, 0.27%)</title><rect x="25.5698%" y="229" width="0.2688%" height="15" fill="rgb(254,191,54)" fg:x="17601" fg:w="185"/><text x="25.8198%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (341 samples, 0.50%)</title><rect x="26.1858%" y="213" width="0.4954%" height="15" fill="rgb(241,83,37)" fg:x="18025" fg:w="341"/><text x="26.4358%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (335 samples, 0.49%)</title><rect x="26.6812%" y="213" width="0.4867%" height="15" fill="rgb(233,36,39)" fg:x="18366" fg:w="335"/><text x="26.9312%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (929 samples, 1.35%)</title><rect x="25.8386%" y="229" width="1.3496%" height="15" fill="rgb(226,3,54)" fg:x="17786" fg:w="929"/><text x="26.0886%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (11 samples, 0.02%)</title><rect x="27.1722%" y="213" width="0.0160%" height="15" fill="rgb(245,192,40)" fg:x="18704" fg:w="11"/><text x="27.4222%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (1,590 samples, 2.31%)</title><rect x="25.1514%" y="245" width="2.3099%" height="15" fill="rgb(238,167,29)" fg:x="17313" fg:w="1590"/><text x="25.4014%" y="255.50">l..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (188 samples, 0.27%)</title><rect x="27.1882%" y="229" width="0.2731%" height="15" fill="rgb(232,182,51)" fg:x="18715" fg:w="188"/><text x="27.4382%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (13 samples, 0.02%)</title><rect x="27.4613%" y="245" width="0.0189%" height="15" fill="rgb(231,60,39)" fg:x="18903" fg:w="13"/><text x="27.7113%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (1,851 samples, 2.69%)</title><rect x="24.8594%" y="261" width="2.6890%" height="15" fill="rgb(208,69,12)" fg:x="17112" fg:w="1851"/><text x="25.1094%" y="271.50">li..</text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (47 samples, 0.07%)</title><rect x="27.4802%" y="245" width="0.0683%" height="15" fill="rgb(235,93,37)" fg:x="18916" fg:w="47"/><text x="27.7302%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (161 samples, 0.23%)</title><rect x="27.5485%" y="261" width="0.2339%" height="15" fill="rgb(213,116,39)" fg:x="18963" fg:w="161"/><text x="27.7985%" y="271.50"></text></g><g><title>rex`alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (2,648 samples, 3.85%)</title><rect x="24.1970%" y="293" width="3.8469%" height="15" fill="rgb(222,207,29)" fg:x="16656" fg:w="2648"/><text x="24.4470%" y="303.50">rex`..</text></g><g><title>rex`alloc::raw_vec::finish_grow (2,290 samples, 3.33%)</title><rect x="24.7171%" y="277" width="3.3268%" height="15" fill="rgb(206,96,30)" fg:x="17014" fg:w="2290"/><text x="24.9671%" y="287.50">rex..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (180 samples, 0.26%)</title><rect x="27.7824%" y="261" width="0.2615%" height="15" fill="rgb(218,138,4)" fg:x="19124" fg:w="180"/><text x="28.0324%" y="271.50"></text></g><g><title>rex`&lt;alloc::string::String as core::fmt::Write&gt;::write_str (3,369 samples, 4.89%)</title><rect x="23.1699%" y="309" width="4.8943%" height="15" fill="rgb(250,191,14)" fg:x="15949" fg:w="3369"/><text x="23.4199%" y="319.50">rex`&lt;a..</text></g><g><title>rex`alloc::raw_vec::finish_grow (14 samples, 0.02%)</title><rect x="28.0439%" y="293" width="0.0203%" height="15" fill="rgb(239,60,40)" fg:x="19304" fg:w="14"/><text x="28.2939%" y="303.50"></text></g><g><title>rex`DYLD-STUB$$memcpy (115 samples, 0.17%)</title><rect x="28.0642%" y="309" width="0.1671%" height="15" fill="rgb(206,27,48)" fg:x="19318" fg:w="115"/><text x="28.3142%" y="319.50"></text></g><g><title>rex`alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (55 samples, 0.08%)</title><rect x="28.2313%" y="309" width="0.0799%" height="15" fill="rgb(225,35,8)" fg:x="19433" fg:w="55"/><text x="28.4813%" y="319.50"></text></g><g><title>rex`core::fmt::Formatter::pad_integral (727 samples, 1.06%)</title><rect x="28.3112%" y="309" width="1.0561%" height="15" fill="rgb(250,213,24)" fg:x="19488" fg:w="727"/><text x="28.5612%" y="319.50"></text></g><g><title>rex`core::fmt::Formatter::pad_integral::write_prefix (259 samples, 0.38%)</title><rect x="29.3673%" y="309" width="0.3763%" height="15" fill="rgb(247,123,22)" fg:x="20215" fg:w="259"/><text x="29.6173%" y="319.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (26 samples, 0.04%)</title><rect x="29.7436%" y="293" width="0.0378%" height="15" fill="rgb(231,138,38)" fg:x="20474" fg:w="26"/><text x="29.9936%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (7 samples, 0.01%)</title><rect x="29.8540%" y="261" width="0.0102%" height="15" fill="rgb(231,145,46)" fg:x="20550" fg:w="7"/><text x="30.1040%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (12 samples, 0.02%)</title><rect x="29.9354%" y="213" width="0.0174%" height="15" fill="rgb(251,118,11)" fg:x="20606" fg:w="12"/><text x="30.1854%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (23 samples, 0.03%)</title><rect x="29.9702%" y="197" width="0.0334%" height="15" fill="rgb(217,147,25)" fg:x="20630" fg:w="23"/><text x="30.2202%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (18 samples, 0.03%)</title><rect x="30.0036%" y="197" width="0.0261%" height="15" fill="rgb(247,81,37)" fg:x="20653" fg:w="18"/><text x="30.2536%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (55 samples, 0.08%)</title><rect x="29.9528%" y="213" width="0.0799%" height="15" fill="rgb(209,12,38)" fg:x="20618" fg:w="55"/><text x="30.2028%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (99 samples, 0.14%)</title><rect x="29.9092%" y="229" width="0.1438%" height="15" fill="rgb(227,1,9)" fg:x="20588" fg:w="99"/><text x="30.1592%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (14 samples, 0.02%)</title><rect x="30.0327%" y="213" width="0.0203%" height="15" fill="rgb(248,47,43)" fg:x="20673" fg:w="14"/><text x="30.2827%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (123 samples, 0.18%)</title><rect x="29.8918%" y="245" width="0.1787%" height="15" fill="rgb(221,10,30)" fg:x="20576" fg:w="123"/><text x="30.1418%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (9 samples, 0.01%)</title><rect x="30.0574%" y="229" width="0.0131%" height="15" fill="rgb(210,229,1)" fg:x="20690" fg:w="9"/><text x="30.3074%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (8 samples, 0.01%)</title><rect x="30.0705%" y="245" width="0.0116%" height="15" fill="rgb(222,148,37)" fg:x="20699" fg:w="8"/><text x="30.3205%" y="255.50"></text></g><g><title>rex`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (177 samples, 0.26%)</title><rect x="29.8409%" y="277" width="0.2571%" height="15" fill="rgb(234,67,33)" fg:x="20541" fg:w="177"/><text x="30.0909%" y="287.50"></text></g><g><title>rex`alloc::raw_vec::finish_grow (152 samples, 0.22%)</title><rect x="29.8772%" y="261" width="0.2208%" height="15" fill="rgb(247,98,35)" fg:x="20566" fg:w="152"/><text x="30.1272%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (11 samples, 0.02%)</title><rect x="30.0821%" y="245" width="0.0160%" height="15" fill="rgb(247,138,52)" fg:x="20707" fg:w="11"/><text x="30.3321%" y="255.50"></text></g><g><title>rex`&lt;alloc::string::String as core::fmt::Write&gt;::write_char (219 samples, 0.32%)</title><rect x="29.7814%" y="293" width="0.3182%" height="15" fill="rgb(213,79,30)" fg:x="20500" fg:w="219"/><text x="30.0314%" y="303.50"></text></g><g><title>rex`&lt;alloc::string::String as core::fmt::Write&gt;::write_str (23 samples, 0.03%)</title><rect x="30.0995%" y="293" width="0.0334%" height="15" fill="rgb(246,177,23)" fg:x="20719" fg:w="23"/><text x="30.3495%" y="303.50"></text></g><g><title>rex`&lt;primitive_types::H160 as core::fmt::LowerHex&gt;::fmt (9,441 samples, 13.72%)</title><rect x="16.4727%" y="357" width="13.7154%" height="15" fill="rgb(230,62,27)" fg:x="11339" fg:w="9441"/><text x="16.7227%" y="367.50">rex`&lt;primitive_types:..</text></g><g><title>rex`core::fmt::write (8,689 samples, 12.62%)</title><rect x="17.5652%" y="341" width="12.6229%" height="15" fill="rgb(216,154,8)" fg:x="12091" fg:w="8689"/><text x="17.8152%" y="351.50">rex`core::fmt::write</text></g><g><title>rex`core::fmt::num::_&lt;impl core::fmt::LowerHex for i8&gt;::fmt (6,693 samples, 9.72%)</title><rect x="20.4649%" y="325" width="9.7233%" height="15" fill="rgb(244,35,45)" fg:x="14087" fg:w="6693"/><text x="20.7149%" y="335.50">rex`core::fmt:..</text></g><g><title>rex`core::fmt::Formatter::pad_integral (306 samples, 0.44%)</title><rect x="29.7436%" y="309" width="0.4445%" height="15" fill="rgb(251,115,12)" fg:x="20474" fg:w="306"/><text x="29.9936%" y="319.50"></text></g><g><title>rex`core::fmt::Formatter::pad_integral::write_prefix (32 samples, 0.05%)</title><rect x="30.1416%" y="293" width="0.0465%" height="15" fill="rgb(240,54,50)" fg:x="20748" fg:w="32"/><text x="30.3916%" y="303.50"></text></g><g><title>rex`alloc::fmt::format::format_inner (9,770 samples, 14.19%)</title><rect x="16.2955%" y="389" width="14.1934%" height="15" fill="rgb(233,84,52)" fg:x="11217" fg:w="9770"/><text x="16.5455%" y="399.50">rex`alloc::fmt::format..</text></g><g><title>rex`core::fmt::write (9,702 samples, 14.09%)</title><rect x="16.3943%" y="373" width="14.0946%" height="15" fill="rgb(207,117,47)" fg:x="11285" fg:w="9702"/><text x="16.6443%" y="383.50">rex`core::fmt::write</text></g><g><title>rex`core::fmt::write (207 samples, 0.30%)</title><rect x="30.1881%" y="357" width="0.3007%" height="15" fill="rgb(249,43,39)" fg:x="20780" fg:w="207"/><text x="30.4381%" y="367.50"></text></g><g><title>rex`core::fmt::write (12 samples, 0.02%)</title><rect x="30.4889%" y="389" width="0.0174%" height="15" fill="rgb(209,38,44)" fg:x="20987" fg:w="12"/><text x="30.7389%" y="399.50"></text></g><g><title>rex`primitive_types::H160::from_slice (7 samples, 0.01%)</title><rect x="30.5063%" y="389" width="0.0102%" height="15" fill="rgb(236,212,23)" fg:x="20999" fg:w="7"/><text x="30.7563%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (11 samples, 0.02%)</title><rect x="30.9741%" y="373" width="0.0160%" height="15" fill="rgb(242,79,21)" fg:x="21321" fg:w="11"/><text x="31.2241%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (90 samples, 0.13%)</title><rect x="30.9900%" y="373" width="0.1307%" height="15" fill="rgb(211,96,35)" fg:x="21332" fg:w="90"/><text x="31.2400%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (140 samples, 0.20%)</title><rect x="31.1208%" y="373" width="0.2034%" height="15" fill="rgb(253,215,40)" fg:x="21422" fg:w="140"/><text x="31.3708%" y="383.50"></text></g><g><title>libsystem_platform.dylib`__bzero (21 samples, 0.03%)</title><rect x="31.3344%" y="373" width="0.0305%" height="15" fill="rgb(211,81,21)" fg:x="21569" fg:w="21"/><text x="31.5844%" y="383.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (281 samples, 0.41%)</title><rect x="31.3649%" y="373" width="0.4082%" height="15" fill="rgb(208,190,38)" fg:x="21590" fg:w="281"/><text x="31.6149%" y="383.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (21 samples, 0.03%)</title><rect x="31.7731%" y="373" width="0.0305%" height="15" fill="rgb(235,213,38)" fg:x="21871" fg:w="21"/><text x="32.0231%" y="383.50"></text></g><g><title>rex`&lt;[V] as alloc::slice::Concat&lt;T&gt;&gt;::concat (494 samples, 0.72%)</title><rect x="31.8036%" y="373" width="0.7177%" height="15" fill="rgb(237,122,38)" fg:x="21892" fg:w="494"/><text x="32.0536%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (135 samples, 0.20%)</title><rect x="32.3251%" y="357" width="0.1961%" height="15" fill="rgb(244,218,35)" fg:x="22251" fg:w="135"/><text x="32.5751%" y="367.50"></text></g><g><title>rex`&lt;tiny_keccak::keccak::Keccak as tiny_keccak::Hasher&gt;::finalize (190 samples, 0.28%)</title><rect x="32.5212%" y="373" width="0.2760%" height="15" fill="rgb(240,68,47)" fg:x="22386" fg:w="190"/><text x="32.7712%" y="383.50"></text></g><g><title>rex`&lt;tiny_keccak::keccak::Keccak as tiny_keccak::Hasher&gt;::update (430 samples, 0.62%)</title><rect x="32.7973%" y="373" width="0.6247%" height="15" fill="rgb(210,16,53)" fg:x="22576" fg:w="430"/><text x="33.0473%" y="383.50"></text></g><g><title>rex`DYLD-STUB$$memcpy (33 samples, 0.05%)</title><rect x="33.4307%" y="373" width="0.0479%" height="15" fill="rgb(235,124,12)" fg:x="23012" fg:w="33"/><text x="33.6807%" y="383.50"></text></g><g><title>rex`_RNvCscSpY9Juk0HT_7___rustc11___rdl_alloc (7 samples, 0.01%)</title><rect x="33.4786%" y="373" width="0.0102%" height="15" fill="rgb(224,169,11)" fg:x="23045" fg:w="7"/><text x="33.7286%" y="383.50"></text></g><g><title>rex`primitive_types::H160::from_slice (41 samples, 0.06%)</title><rect x="33.4917%" y="373" width="0.0596%" height="15" fill="rgb(250,166,2)" fg:x="23054" fg:w="41"/><text x="33.7417%" y="383.50"></text></g><g><title>rex`rex_sdk::create::compute_create2_address (7,247 samples, 10.53%)</title><rect x="30.5165%" y="389" width="10.5281%" height="15" fill="rgb(242,216,29)" fg:x="21006" fg:w="7247"/><text x="30.7665%" y="399.50">rex`rex_sdk::cr..</text></g><g><title>rex`tiny_keccak::keccakf::keccakf (5,158 samples, 7.49%)</title><rect x="33.5512%" y="373" width="7.4933%" height="15" fill="rgb(230,116,27)" fg:x="23095" fg:w="5158"/><text x="33.8012%" y="383.50">rex`tiny_k..</text></g><g><title>rex`&lt;rayon::iter::find::FindFolder&lt;T,P&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume (17,613 samples, 25.59%)</title><rect x="15.5110%" y="405" width="25.5873%" height="15" fill="rgb(228,99,48)" fg:x="10677" fg:w="17613"/><text x="15.7610%" y="415.50">rex`&lt;rayon::iter::find::FindFolder&lt;T,P&gt; a..</text></g><g><title>rex`tiny_keccak::keccak::Keccak::v256 (37 samples, 0.05%)</title><rect x="41.0445%" y="389" width="0.0538%" height="15" fill="rgb(253,11,6)" fg:x="28253" fg:w="37"/><text x="41.2945%" y="399.50"></text></g><g><title>rex`DYLD-STUB$$free (13 samples, 0.02%)</title><rect x="41.0983%" y="405" width="0.0189%" height="15" fill="rgb(247,143,39)" fg:x="28290" fg:w="13"/><text x="41.3483%" y="415.50"></text></g><g><title>rex`DYLD-STUB$$pthread_mutex_lock (9 samples, 0.01%)</title><rect x="41.1215%" y="405" width="0.0131%" height="15" fill="rgb(236,97,10)" fg:x="28306" fg:w="9"/><text x="41.3715%" y="415.50"></text></g><g><title>rex`alloc::fmt::format::format_inner (15 samples, 0.02%)</title><rect x="41.1360%" y="405" width="0.0218%" height="15" fill="rgb(233,208,19)" fg:x="28316" fg:w="15"/><text x="41.3860%" y="415.50"></text></g><g><title>rex`rand_core::impls::fill_bytes_via_next (117 samples, 0.17%)</title><rect x="41.1578%" y="405" width="0.1700%" height="15" fill="rgb(216,164,2)" fg:x="28331" fg:w="117"/><text x="41.4078%" y="415.50"></text></g><g><title>rex`rex_sdk::create::compute_create2_address (23 samples, 0.03%)</title><rect x="41.3278%" y="405" width="0.0334%" height="15" fill="rgb(220,129,5)" fg:x="28448" fg:w="23"/><text x="41.5778%" y="415.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexwait (13,819 samples, 20.08%)</title><rect x="41.7041%" y="373" width="20.0755%" height="15" fill="rgb(242,17,10)" fg:x="28707" fg:w="13819"/><text x="41.9541%" y="383.50">libsystem_kernel.dylib`__psynch_..</text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (14,173 samples, 20.59%)</title><rect x="41.3714%" y="389" width="20.5898%" height="15" fill="rgb(242,107,0)" fg:x="28478" fg:w="14173"/><text x="41.6214%" y="399.50">libsystem_pthread.dylib`_pthread..</text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_wait (124 samples, 0.18%)</title><rect x="61.7811%" y="373" width="0.1801%" height="15" fill="rgb(251,28,31)" fg:x="42527" fg:w="124"/><text x="62.0311%" y="383.50"></text></g><g><title>rex`std::sys::pal::unix::sync::mutex::Mutex::lock (14,542 samples, 21.13%)</title><rect x="41.3612%" y="405" width="21.1259%" height="15" fill="rgb(233,223,10)" fg:x="28471" fg:w="14542"/><text x="41.6112%" y="415.50">rex`std::sys::pal::unix::sync::mu..</text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (358 samples, 0.52%)</title><rect x="61.9670%" y="389" width="0.5201%" height="15" fill="rgb(215,21,27)" fg:x="42655" fg:w="358"/><text x="62.2170%" y="399.50"></text></g><g><title>rex`&lt;&amp;rayon::iter::par_bridge::IterParallelProducer&lt;Iter&gt; as rayon::iter::plumbing::UnindexedProducer&gt;::fold_with (43,001 samples, 62.47%)</title><rect x="0.0189%" y="421" width="62.4697%" height="15" fill="rgb(232,23,21)" fg:x="13" fg:w="43001"/><text x="0.2689%" y="431.50">rex`&lt;&amp;rayon::iter::par_bridge::IterParallelProducer&lt;Iter&gt; as rayon::iter::plumbing::UnindexedProducer&gt;:..</text></g><g><title>rex`&lt;rayon::iter::find::FindFolder&lt;T,P&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume (30 samples, 0.04%)</title><rect x="62.4886%" y="421" width="0.0436%" height="15" fill="rgb(244,5,23)" fg:x="43014" fg:w="30"/><text x="62.7386%" y="431.50"></text></g><g><title>rex`DYLD-STUB$$pthread_mutex_unlock (11 samples, 0.02%)</title><rect x="62.5321%" y="421" width="0.0160%" height="15" fill="rgb(226,81,46)" fg:x="43044" fg:w="11"/><text x="62.7821%" y="431.50"></text></g><g><title>rex`rand_core::impls::fill_bytes_via_next (10 samples, 0.01%)</title><rect x="62.5481%" y="421" width="0.0145%" height="15" fill="rgb(247,70,30)" fg:x="43055" fg:w="10"/><text x="62.7981%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`_free (23 samples, 0.03%)</title><rect x="62.6455%" y="373" width="0.0334%" height="15" fill="rgb(212,68,19)" fg:x="43122" fg:w="23"/><text x="62.8955%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (8 samples, 0.01%)</title><rect x="62.6789%" y="373" width="0.0116%" height="15" fill="rgb(240,187,13)" fg:x="43145" fg:w="8"/><text x="62.9289%" y="383.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (39 samples, 0.06%)</title><rect x="62.6934%" y="373" width="0.0567%" height="15" fill="rgb(223,113,26)" fg:x="43155" fg:w="39"/><text x="62.9434%" y="383.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexdrop (3,876 samples, 5.63%)</title><rect x="62.7777%" y="357" width="5.6309%" height="15" fill="rgb(206,192,2)" fg:x="43213" fg:w="3876"/><text x="63.0277%" y="367.50">libsyst..</text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_unlock_slow (3,899 samples, 5.66%)</title><rect x="62.7515%" y="373" width="5.6643%" height="15" fill="rgb(241,108,4)" fg:x="43195" fg:w="3899"/><text x="63.0015%" y="383.50">libsyst..</text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (182 samples, 0.26%)</title><rect x="68.4230%" y="373" width="0.2644%" height="15" fill="rgb(247,173,49)" fg:x="47099" fg:w="182"/><text x="68.6730%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`_free (29 samples, 0.04%)</title><rect x="68.7964%" y="357" width="0.0421%" height="15" fill="rgb(224,114,35)" fg:x="47356" fg:w="29"/><text x="69.0464%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (62 samples, 0.09%)</title><rect x="68.8385%" y="357" width="0.0901%" height="15" fill="rgb(245,159,27)" fg:x="47385" fg:w="62"/><text x="69.0885%" y="367.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (9 samples, 0.01%)</title><rect x="68.9373%" y="357" width="0.0131%" height="15" fill="rgb(245,172,44)" fg:x="47453" fg:w="9"/><text x="69.1873%" y="367.50"></text></g><g><title>rex`&lt;[V] as alloc::slice::Concat&lt;T&gt;&gt;::concat (15 samples, 0.02%)</title><rect x="68.9504%" y="357" width="0.0218%" height="15" fill="rgb(236,23,11)" fg:x="47462" fg:w="15"/><text x="69.2004%" y="367.50"></text></g><g><title>rex`&lt;tiny_keccak::keccak::Keccak as tiny_keccak::Hasher&gt;::finalize (13 samples, 0.02%)</title><rect x="68.9722%" y="357" width="0.0189%" height="15" fill="rgb(205,117,38)" fg:x="47477" fg:w="13"/><text x="69.2222%" y="367.50"></text></g><g><title>rex`&lt;tiny_keccak::keccak::Keccak as tiny_keccak::Hasher&gt;::update (30 samples, 0.04%)</title><rect x="68.9911%" y="357" width="0.0436%" height="15" fill="rgb(237,72,25)" fg:x="47490" fg:w="30"/><text x="69.2411%" y="367.50"></text></g><g><title>rex`&lt;primitive_types::H160 as core::fmt::LowerHex&gt;::fmt (14 samples, 0.02%)</title><rect x="69.0710%" y="341" width="0.0203%" height="15" fill="rgb(244,70,9)" fg:x="47545" fg:w="14"/><text x="69.3210%" y="351.50"></text></g><g><title>rex`&lt;&amp;T as core::fmt::LowerHex&gt;::fmt (39 samples, 0.06%)</title><rect x="69.4443%" y="309" width="0.0567%" height="15" fill="rgb(217,125,39)" fg:x="47802" fg:w="39"/><text x="69.6943%" y="319.50"></text></g><g><title>rex`core::fmt::num::_&lt;impl core::fmt::LowerHex for i8&gt;::fmt (30 samples, 0.04%)</title><rect x="69.5010%" y="309" width="0.0436%" height="15" fill="rgb(235,36,10)" fg:x="47841" fg:w="30"/><text x="69.7510%" y="319.50"></text></g><g><title>rex`&lt;alloc::string::String as core::fmt::Write&gt;::write_str (81 samples, 0.12%)</title><rect x="70.2927%" y="293" width="0.1177%" height="15" fill="rgb(251,123,47)" fg:x="48386" fg:w="81"/><text x="70.5427%" y="303.50"></text></g><g><title>rex`core::fmt::Formatter::pad_integral (146 samples, 0.21%)</title><rect x="70.4104%" y="293" width="0.2121%" height="15" fill="rgb(221,13,13)" fg:x="48467" fg:w="146"/><text x="70.6604%" y="303.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (203 samples, 0.29%)</title><rect x="71.4273%" y="277" width="0.2949%" height="15" fill="rgb(238,131,9)" fg:x="49167" fg:w="203"/><text x="71.6773%" y="287.50"></text></g><g><title>rex`&lt;alloc::string::String as core::fmt::Write&gt;::write_char (7 samples, 0.01%)</title><rect x="71.7222%" y="277" width="0.0102%" height="15" fill="rgb(211,50,8)" fg:x="49370" fg:w="7"/><text x="71.9722%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (25 samples, 0.04%)</title><rect x="72.2321%" y="245" width="0.0363%" height="15" fill="rgb(245,182,24)" fg:x="49721" fg:w="25"/><text x="72.4821%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (22 samples, 0.03%)</title><rect x="72.2685%" y="245" width="0.0320%" height="15" fill="rgb(242,14,37)" fg:x="49746" fg:w="22"/><text x="72.5185%" y="255.50"></text></g><g><title>rex`DYLD-STUB$$realloc (8 samples, 0.01%)</title><rect x="72.3121%" y="245" width="0.0116%" height="15" fill="rgb(246,228,12)" fg:x="49776" fg:w="8"/><text x="72.5621%" y="255.50"></text></g><g><title>rex`_RNvCscSpY9Juk0HT_7___rustc13___rdl_realloc (13 samples, 0.02%)</title><rect x="72.3280%" y="245" width="0.0189%" height="15" fill="rgb(213,55,15)" fg:x="49787" fg:w="13"/><text x="72.5780%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (14 samples, 0.02%)</title><rect x="72.6578%" y="197" width="0.0203%" height="15" fill="rgb(209,9,3)" fg:x="50014" fg:w="14"/><text x="72.9078%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (83 samples, 0.12%)</title><rect x="72.6781%" y="197" width="0.1206%" height="15" fill="rgb(230,59,30)" fg:x="50028" fg:w="83"/><text x="72.9281%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (135 samples, 0.20%)</title><rect x="72.9614%" y="181" width="0.1961%" height="15" fill="rgb(209,121,21)" fg:x="50223" fg:w="135"/><text x="73.2114%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (116 samples, 0.17%)</title><rect x="73.1576%" y="181" width="0.1685%" height="15" fill="rgb(220,109,13)" fg:x="50358" fg:w="116"/><text x="73.4076%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (372 samples, 0.54%)</title><rect x="72.7987%" y="197" width="0.5404%" height="15" fill="rgb(232,18,1)" fg:x="50111" fg:w="372"/><text x="73.0487%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (8 samples, 0.01%)</title><rect x="73.3275%" y="181" width="0.0116%" height="15" fill="rgb(215,41,42)" fg:x="50475" fg:w="8"/><text x="73.5775%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (643 samples, 0.93%)</title><rect x="72.5343%" y="213" width="0.9341%" height="15" fill="rgb(224,123,36)" fg:x="49929" fg:w="643"/><text x="72.7843%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (89 samples, 0.13%)</title><rect x="73.3391%" y="197" width="0.1293%" height="15" fill="rgb(240,125,3)" fg:x="50483" fg:w="89"/><text x="73.5891%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (748 samples, 1.09%)</title><rect x="72.4166%" y="229" width="1.0867%" height="15" fill="rgb(205,98,50)" fg:x="49848" fg:w="748"/><text x="72.6666%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (18 samples, 0.03%)</title><rect x="73.4772%" y="213" width="0.0261%" height="15" fill="rgb(205,185,37)" fg:x="50578" fg:w="18"/><text x="73.7272%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (61 samples, 0.09%)</title><rect x="73.5033%" y="229" width="0.0886%" height="15" fill="rgb(238,207,15)" fg:x="50596" fg:w="61"/><text x="73.7533%" y="239.50"></text></g><g><title>rex`alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1,078 samples, 1.57%)</title><rect x="72.1435%" y="261" width="1.5661%" height="15" fill="rgb(213,199,42)" fg:x="49660" fg:w="1078"/><text x="72.3935%" y="271.50"></text></g><g><title>rex`alloc::raw_vec::finish_grow (938 samples, 1.36%)</title><rect x="72.3469%" y="245" width="1.3627%" height="15" fill="rgb(235,201,11)" fg:x="49800" fg:w="938"/><text x="72.5969%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (81 samples, 0.12%)</title><rect x="73.5919%" y="229" width="0.1177%" height="15" fill="rgb(207,46,11)" fg:x="50657" fg:w="81"/><text x="73.8419%" y="239.50"></text></g><g><title>rex`&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1,371 samples, 1.99%)</title><rect x="71.7324%" y="277" width="1.9917%" height="15" fill="rgb(241,35,35)" fg:x="49377" fg:w="1371"/><text x="71.9824%" y="287.50">r..</text></g><g><title>rex`alloc::raw_vec::finish_grow (10 samples, 0.01%)</title><rect x="73.7096%" y="261" width="0.0145%" height="15" fill="rgb(243,32,47)" fg:x="50738" fg:w="10"/><text x="73.9596%" y="271.50"></text></g><g><title>rex`DYLD-STUB$$memcpy (50 samples, 0.07%)</title><rect x="73.7241%" y="277" width="0.0726%" height="15" fill="rgb(247,202,23)" fg:x="50748" fg:w="50"/><text x="73.9741%" y="287.50"></text></g><g><title>rex`alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (11 samples, 0.02%)</title><rect x="73.7968%" y="277" width="0.0160%" height="15" fill="rgb(219,102,11)" fg:x="50798" fg:w="11"/><text x="74.0468%" y="287.50"></text></g><g><title>rex`core::fmt::Formatter::pad_integral (292 samples, 0.42%)</title><rect x="73.8127%" y="277" width="0.4242%" height="15" fill="rgb(243,110,44)" fg:x="50809" fg:w="292"/><text x="74.0627%" y="287.50"></text></g><g><title>rex`core::fmt::Formatter::pad_integral::write_prefix (112 samples, 0.16%)</title><rect x="74.2369%" y="277" width="0.1627%" height="15" fill="rgb(222,74,54)" fg:x="51101" fg:w="112"/><text x="74.4869%" y="287.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (11 samples, 0.02%)</title><rect x="74.3997%" y="261" width="0.0160%" height="15" fill="rgb(216,99,12)" fg:x="51213" fg:w="11"/><text x="74.6497%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (21 samples, 0.03%)</title><rect x="74.4912%" y="181" width="0.0305%" height="15" fill="rgb(226,22,26)" fg:x="51276" fg:w="21"/><text x="74.7412%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (11 samples, 0.02%)</title><rect x="74.5057%" y="165" width="0.0160%" height="15" fill="rgb(217,163,10)" fg:x="51286" fg:w="11"/><text x="74.7557%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (39 samples, 0.06%)</title><rect x="74.4694%" y="197" width="0.0567%" height="15" fill="rgb(213,25,53)" fg:x="51261" fg:w="39"/><text x="74.7194%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (44 samples, 0.06%)</title><rect x="74.4636%" y="213" width="0.0639%" height="15" fill="rgb(252,105,26)" fg:x="51257" fg:w="44"/><text x="74.7136%" y="223.50"></text></g><g><title>rex`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (70 samples, 0.10%)</title><rect x="74.4403%" y="245" width="0.1017%" height="15" fill="rgb(220,39,43)" fg:x="51241" fg:w="70"/><text x="74.6903%" y="255.50"></text></g><g><title>rex`alloc::raw_vec::finish_grow (58 samples, 0.08%)</title><rect x="74.4578%" y="229" width="0.0843%" height="15" fill="rgb(229,68,48)" fg:x="51253" fg:w="58"/><text x="74.7078%" y="239.50"></text></g><g><title>rex`&lt;alloc::string::String as core::fmt::Write&gt;::write_char (90 samples, 0.13%)</title><rect x="74.4156%" y="261" width="0.1307%" height="15" fill="rgb(252,8,32)" fg:x="51224" fg:w="90"/><text x="74.6656%" y="271.50"></text></g><g><title>rex`&lt;alloc::string::String as core::fmt::Write&gt;::write_str (8 samples, 0.01%)</title><rect x="74.5464%" y="261" width="0.0116%" height="15" fill="rgb(223,20,43)" fg:x="51314" fg:w="8"/><text x="74.7964%" y="271.50"></text></g><g><title>rex`&lt;primitive_types::H160 as core::fmt::LowerHex&gt;::fmt (3,764 samples, 5.47%)</title><rect x="69.1276%" y="325" width="5.4681%" height="15" fill="rgb(229,81,49)" fg:x="47584" fg:w="3764"/><text x="69.3776%" y="335.50">rex`&lt;pr..</text></g><g><title>rex`core::fmt::write (3,477 samples, 5.05%)</title><rect x="69.5446%" y="309" width="5.0512%" height="15" fill="rgb(236,28,36)" fg:x="47871" fg:w="3477"/><text x="69.7946%" y="319.50">rex`co..</text></g><g><title>rex`core::fmt::num::_&lt;impl core::fmt::LowerHex for i8&gt;::fmt (2,735 samples, 3.97%)</title><rect x="70.6225%" y="293" width="3.9733%" height="15" fill="rgb(249,185,26)" fg:x="48613" fg:w="2735"/><text x="70.8725%" y="303.50">rex`..</text></g><g><title>rex`core::fmt::Formatter::pad_integral (135 samples, 0.20%)</title><rect x="74.3997%" y="277" width="0.1961%" height="15" fill="rgb(249,174,33)" fg:x="51213" fg:w="135"/><text x="74.6497%" y="287.50"></text></g><g><title>rex`core::fmt::Formatter::pad_integral::write_prefix (22 samples, 0.03%)</title><rect x="74.5638%" y="261" width="0.0320%" height="15" fill="rgb(233,201,37)" fg:x="51326" fg:w="22"/><text x="74.8138%" y="271.50"></text></g><g><title>rex`alloc::fmt::format::format_inner (3,883 samples, 5.64%)</title><rect x="69.0434%" y="357" width="5.6410%" height="15" fill="rgb(221,78,26)" fg:x="47526" fg:w="3883"/><text x="69.2934%" y="367.50">rex`all..</text></g><g><title>rex`core::fmt::write (3,850 samples, 5.59%)</title><rect x="69.0913%" y="341" width="5.5931%" height="15" fill="rgb(250,127,30)" fg:x="47559" fg:w="3850"/><text x="69.3413%" y="351.50">rex`cor..</text></g><g><title>rex`core::fmt::write (61 samples, 0.09%)</title><rect x="74.5958%" y="325" width="0.0886%" height="15" fill="rgb(230,49,44)" fg:x="51348" fg:w="61"/><text x="74.8458%" y="335.50"></text></g><g><title>rex`core::fmt::write (9 samples, 0.01%)</title><rect x="74.6844%" y="357" width="0.0131%" height="15" fill="rgb(229,67,23)" fg:x="51409" fg:w="9"/><text x="74.9344%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (23 samples, 0.03%)</title><rect x="74.8703%" y="341" width="0.0334%" height="15" fill="rgb(249,83,47)" fg:x="51537" fg:w="23"/><text x="75.1203%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (46 samples, 0.07%)</title><rect x="74.9038%" y="341" width="0.0668%" height="15" fill="rgb(215,43,3)" fg:x="51560" fg:w="46"/><text x="75.1538%" y="351.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (123 samples, 0.18%)</title><rect x="74.9793%" y="341" width="0.1787%" height="15" fill="rgb(238,154,13)" fg:x="51612" fg:w="123"/><text x="75.2293%" y="351.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (7 samples, 0.01%)</title><rect x="75.1580%" y="341" width="0.0102%" height="15" fill="rgb(219,56,2)" fg:x="51735" fg:w="7"/><text x="75.4080%" y="351.50"></text></g><g><title>rex`&lt;[V] as alloc::slice::Concat&lt;T&gt;&gt;::concat (185 samples, 0.27%)</title><rect x="75.1682%" y="341" width="0.2688%" height="15" fill="rgb(233,0,4)" fg:x="51742" fg:w="185"/><text x="75.4182%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (47 samples, 0.07%)</title><rect x="75.3686%" y="325" width="0.0683%" height="15" fill="rgb(235,30,7)" fg:x="51880" fg:w="47"/><text x="75.6186%" y="335.50"></text></g><g><title>rex`&lt;tiny_keccak::keccak::Keccak as tiny_keccak::Hasher&gt;::finalize (61 samples, 0.09%)</title><rect x="75.4369%" y="341" width="0.0886%" height="15" fill="rgb(250,79,13)" fg:x="51927" fg:w="61"/><text x="75.6869%" y="351.50"></text></g><g><title>rex`&lt;tiny_keccak::keccak::Keccak as tiny_keccak::Hasher&gt;::update (156 samples, 0.23%)</title><rect x="75.5255%" y="341" width="0.2266%" height="15" fill="rgb(211,146,34)" fg:x="51988" fg:w="156"/><text x="75.7755%" y="351.50"></text></g><g><title>rex`DYLD-STUB$$memcpy (13 samples, 0.02%)</title><rect x="75.7551%" y="341" width="0.0189%" height="15" fill="rgb(228,22,38)" fg:x="52146" fg:w="13"/><text x="76.0051%" y="351.50"></text></g><g><title>rex`_RNvCscSpY9Juk0HT_7___rustc11___rdl_alloc (7 samples, 0.01%)</title><rect x="75.7740%" y="341" width="0.0102%" height="15" fill="rgb(235,168,5)" fg:x="52159" fg:w="7"/><text x="76.0240%" y="351.50"></text></g><g><title>rex`primitive_types::H160::from_slice (10 samples, 0.01%)</title><rect x="75.7856%" y="341" width="0.0145%" height="15" fill="rgb(221,155,16)" fg:x="52167" fg:w="10"/><text x="76.0356%" y="351.50"></text></g><g><title>rex`rex_sdk::create::compute_create2_address (2,797 samples, 4.06%)</title><rect x="74.7018%" y="357" width="4.0633%" height="15" fill="rgb(215,215,53)" fg:x="51421" fg:w="2797"/><text x="74.9518%" y="367.50">rex`..</text></g><g><title>rex`tiny_keccak::keccakf::keccakf (2,041 samples, 2.97%)</title><rect x="75.8001%" y="341" width="2.9651%" height="15" fill="rgb(223,4,10)" fg:x="52177" fg:w="2041"/><text x="76.0501%" y="351.50">rex..</text></g><g><title>rex`&lt;rayon::iter::find::FindFolder&lt;T,P&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume (6,951 samples, 10.10%)</title><rect x="68.6874%" y="373" width="10.0981%" height="15" fill="rgb(234,103,6)" fg:x="47281" fg:w="6951"/><text x="68.9374%" y="383.50">rex`&lt;rayon::ite..</text></g><g><title>rex`tiny_keccak::keccak::Keccak::v256 (14 samples, 0.02%)</title><rect x="78.7652%" y="357" width="0.0203%" height="15" fill="rgb(227,97,0)" fg:x="54218" fg:w="14"/><text x="79.0152%" y="367.50"></text></g><g><title>rex`rand_core::impls::fill_bytes_via_next (45 samples, 0.07%)</title><rect x="78.8131%" y="373" width="0.0654%" height="15" fill="rgb(234,150,53)" fg:x="54251" fg:w="45"/><text x="79.0631%" y="383.50"></text></g><g><title>rex`rex_sdk::create::compute_create2_address (15 samples, 0.02%)</title><rect x="78.8785%" y="373" width="0.0218%" height="15" fill="rgb(228,201,54)" fg:x="54296" fg:w="15"/><text x="79.1285%" y="383.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexwait (5,623 samples, 8.17%)</title><rect x="79.0702%" y="341" width="8.1688%" height="15" fill="rgb(222,22,37)" fg:x="54428" fg:w="5623"/><text x="79.3202%" y="351.50">libsystem_k..</text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (5,781 samples, 8.40%)</title><rect x="78.9046%" y="357" width="8.3983%" height="15" fill="rgb(237,53,32)" fg:x="54314" fg:w="5781"/><text x="79.1546%" y="367.50">libsystem_pt..</text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_wait (42 samples, 0.06%)</title><rect x="87.2420%" y="341" width="0.0610%" height="15" fill="rgb(233,25,53)" fg:x="60053" fg:w="42"/><text x="87.4920%" y="351.50"></text></g><g><title>rex`&lt;&amp;rayon::iter::par_bridge::IterParallelProducer&lt;Iter&gt; as rayon::iter::plumbing::UnindexedProducer&gt;::fold_with (17,165 samples, 24.94%)</title><rect x="62.5656%" y="389" width="24.9364%" height="15" fill="rgb(210,40,34)" fg:x="43067" fg:w="17165"/><text x="62.8156%" y="399.50">rex`&lt;&amp;rayon::iter::par_bridge::IterParal..</text></g><g><title>rex`std::sys::pal::unix::sync::mutex::Mutex::lock (5,921 samples, 8.60%)</title><rect x="78.9003%" y="373" width="8.6017%" height="15" fill="rgb(241,220,44)" fg:x="54311" fg:w="5921"/><text x="79.1503%" y="383.50">rex`std::sys..</text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (136 samples, 0.20%)</title><rect x="87.3044%" y="357" width="0.1976%" height="15" fill="rgb(235,28,35)" fg:x="60096" fg:w="136"/><text x="87.5544%" y="367.50"></text></g><g><title>rex`DYLD-STUB$$pthread_mutex_unlock (8 samples, 0.01%)</title><rect x="87.5064%" y="389" width="0.0116%" height="15" fill="rgb(210,56,17)" fg:x="60235" fg:w="8"/><text x="87.7564%" y="399.50"></text></g><g><title>rex`rayon_core::join::join_context::_{{closure}} (17,185 samples, 24.97%)</title><rect x="62.5626%" y="421" width="24.9655%" height="15" fill="rgb(224,130,29)" fg:x="43065" fg:w="17185"/><text x="62.8126%" y="431.50">rex`rayon_core::join::join_context::_{{c..</text></g><g><title>rex`rayon::iter::plumbing::bridge_unindexed_producer_consumer (17,185 samples, 24.97%)</title><rect x="62.5626%" y="405" width="24.9655%" height="15" fill="rgb(235,212,8)" fg:x="43065" fg:w="17185"/><text x="62.8126%" y="415.50">rex`rayon::iter::plumbing::bridge_uninde..</text></g><g><title>rex`rayon::iter::plumbing::bridge_unindexed_producer_consumer (60,250 samples, 87.53%)</title><rect x="0.0044%" y="437" width="87.5281%" height="15" fill="rgb(223,33,50)" fg:x="3" fg:w="60250"/><text x="0.2544%" y="447.50">rex`rayon::iter::plumbing::bridge_unindexed_producer_consumer</text></g><g><title>libsystem_malloc.dylib`_free (13 samples, 0.02%)</title><rect x="87.5877%" y="229" width="0.0189%" height="15" fill="rgb(219,149,13)" fg:x="60291" fg:w="13"/><text x="87.8377%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (21 samples, 0.03%)</title><rect x="87.6095%" y="229" width="0.0305%" height="15" fill="rgb(250,156,29)" fg:x="60306" fg:w="21"/><text x="87.8595%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexdrop (1,903 samples, 2.76%)</title><rect x="87.6676%" y="213" width="2.7646%" height="15" fill="rgb(216,193,19)" fg:x="60346" fg:w="1903"/><text x="87.9176%" y="223.50">li..</text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_unlock_slow (1,924 samples, 2.80%)</title><rect x="87.6429%" y="229" width="2.7951%" height="15" fill="rgb(216,135,14)" fg:x="60329" fg:w="1924"/><text x="87.8929%" y="239.50">li..</text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (76 samples, 0.11%)</title><rect x="90.4380%" y="229" width="0.1104%" height="15" fill="rgb(241,47,5)" fg:x="62253" fg:w="76"/><text x="90.6880%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_free (10 samples, 0.01%)</title><rect x="90.6036%" y="213" width="0.0145%" height="15" fill="rgb(233,42,35)" fg:x="62367" fg:w="10"/><text x="90.8536%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (31 samples, 0.05%)</title><rect x="90.6181%" y="213" width="0.0450%" height="15" fill="rgb(231,13,6)" fg:x="62377" fg:w="31"/><text x="90.8681%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (12 samples, 0.02%)</title><rect x="90.6675%" y="213" width="0.0174%" height="15" fill="rgb(207,181,40)" fg:x="62411" fg:w="12"/><text x="90.9175%" y="223.50"></text></g><g><title>rex`&lt;[V] as alloc::slice::Concat&lt;T&gt;&gt;::concat (9 samples, 0.01%)</title><rect x="90.6850%" y="213" width="0.0131%" height="15" fill="rgb(254,173,49)" fg:x="62423" fg:w="9"/><text x="90.9350%" y="223.50"></text></g><g><title>rex`&lt;tiny_keccak::keccak::Keccak as tiny_keccak::Hasher&gt;::update (12 samples, 0.02%)</title><rect x="90.7039%" y="213" width="0.0174%" height="15" fill="rgb(221,1,38)" fg:x="62436" fg:w="12"/><text x="90.9539%" y="223.50"></text></g><g><title>rex`&lt;&amp;T as core::fmt::LowerHex&gt;::fmt (23 samples, 0.03%)</title><rect x="90.9218%" y="165" width="0.0334%" height="15" fill="rgb(206,124,46)" fg:x="62586" fg:w="23"/><text x="91.1718%" y="175.50"></text></g><g><title>rex`core::fmt::num::_&lt;impl core::fmt::LowerHex for i8&gt;::fmt (17 samples, 0.02%)</title><rect x="90.9552%" y="165" width="0.0247%" height="15" fill="rgb(249,21,11)" fg:x="62609" fg:w="17"/><text x="91.2052%" y="175.50"></text></g><g><title>rex`&lt;alloc::string::String as core::fmt::Write&gt;::write_str (42 samples, 0.06%)</title><rect x="91.3460%" y="149" width="0.0610%" height="15" fill="rgb(222,201,40)" fg:x="62878" fg:w="42"/><text x="91.5960%" y="159.50"></text></g><g><title>rex`core::fmt::Formatter::pad_integral (82 samples, 0.12%)</title><rect x="91.4070%" y="149" width="0.1191%" height="15" fill="rgb(235,61,29)" fg:x="62920" fg:w="82"/><text x="91.6570%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (88 samples, 0.13%)</title><rect x="91.9372%" y="133" width="0.1278%" height="15" fill="rgb(219,207,3)" fg:x="63285" fg:w="88"/><text x="92.1872%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (19 samples, 0.03%)</title><rect x="92.3208%" y="101" width="0.0276%" height="15" fill="rgb(222,56,46)" fg:x="63549" fg:w="19"/><text x="92.5708%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (8 samples, 0.01%)</title><rect x="92.3484%" y="101" width="0.0116%" height="15" fill="rgb(239,76,54)" fg:x="63568" fg:w="8"/><text x="92.5984%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (41 samples, 0.06%)</title><rect x="92.5343%" y="53" width="0.0596%" height="15" fill="rgb(231,124,27)" fg:x="63696" fg:w="41"/><text x="92.7843%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (86 samples, 0.12%)</title><rect x="92.6767%" y="37" width="0.1249%" height="15" fill="rgb(249,195,6)" fg:x="63794" fg:w="86"/><text x="92.9267%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (57 samples, 0.08%)</title><rect x="92.8016%" y="37" width="0.0828%" height="15" fill="rgb(237,174,47)" fg:x="63880" fg:w="57"/><text x="93.0516%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (203 samples, 0.29%)</title><rect x="92.5939%" y="53" width="0.2949%" height="15" fill="rgb(206,201,31)" fg:x="63737" fg:w="203"/><text x="92.8439%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (329 samples, 0.48%)</title><rect x="92.4646%" y="69" width="0.4780%" height="15" fill="rgb(231,57,52)" fg:x="63648" fg:w="329"/><text x="92.7146%" y="79.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (37 samples, 0.05%)</title><rect x="92.8888%" y="53" width="0.0538%" height="15" fill="rgb(248,177,22)" fg:x="63940" fg:w="37"/><text x="93.1388%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (376 samples, 0.55%)</title><rect x="92.4123%" y="85" width="0.5462%" height="15" fill="rgb(215,211,37)" fg:x="63612" fg:w="376"/><text x="92.6623%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (8 samples, 0.01%)</title><rect x="92.9469%" y="69" width="0.0116%" height="15" fill="rgb(241,128,51)" fg:x="63980" fg:w="8"/><text x="93.1969%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (20 samples, 0.03%)</title><rect x="92.9585%" y="85" width="0.0291%" height="15" fill="rgb(227,165,31)" fg:x="63988" fg:w="20"/><text x="93.2085%" y="95.50"></text></g><g><title>rex`alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (522 samples, 0.76%)</title><rect x="92.2859%" y="117" width="0.7583%" height="15" fill="rgb(228,167,24)" fg:x="63525" fg:w="522"/><text x="92.5359%" y="127.50"></text></g><g><title>rex`alloc::raw_vec::finish_grow (460 samples, 0.67%)</title><rect x="92.3760%" y="101" width="0.6683%" height="15" fill="rgb(228,143,12)" fg:x="63587" fg:w="460"/><text x="92.6260%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (39 samples, 0.06%)</title><rect x="92.9876%" y="85" width="0.0567%" height="15" fill="rgb(249,149,8)" fg:x="64008" fg:w="39"/><text x="93.2376%" y="95.50"></text></g><g><title>rex`&lt;alloc::string::String as core::fmt::Write&gt;::write_str (672 samples, 0.98%)</title><rect x="92.0723%" y="133" width="0.9762%" height="15" fill="rgb(243,35,44)" fg:x="63378" fg:w="672"/><text x="92.3223%" y="143.50"></text></g><g><title>rex`DYLD-STUB$$memcpy (19 samples, 0.03%)</title><rect x="93.0486%" y="133" width="0.0276%" height="15" fill="rgb(246,89,9)" fg:x="64050" fg:w="19"/><text x="93.2986%" y="143.50"></text></g><g><title>rex`alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (9 samples, 0.01%)</title><rect x="93.0762%" y="133" width="0.0131%" height="15" fill="rgb(233,213,13)" fg:x="64069" fg:w="9"/><text x="93.3262%" y="143.50"></text></g><g><title>rex`core::fmt::Formatter::pad_integral (162 samples, 0.24%)</title><rect x="93.0893%" y="133" width="0.2353%" height="15" fill="rgb(233,141,41)" fg:x="64078" fg:w="162"/><text x="93.3393%" y="143.50"></text></g><g><title>rex`core::fmt::Formatter::pad_integral::write_prefix (50 samples, 0.07%)</title><rect x="93.3246%" y="133" width="0.0726%" height="15" fill="rgb(239,167,4)" fg:x="64240" fg:w="50"/><text x="93.5746%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (14 samples, 0.02%)</title><rect x="93.4437%" y="37" width="0.0203%" height="15" fill="rgb(209,217,16)" fg:x="64322" fg:w="14"/><text x="93.6937%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (24 samples, 0.03%)</title><rect x="93.4321%" y="53" width="0.0349%" height="15" fill="rgb(219,88,35)" fg:x="64314" fg:w="24"/><text x="93.6821%" y="63.50"></text></g><g><title>rex`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (38 samples, 0.06%)</title><rect x="93.4132%" y="101" width="0.0552%" height="15" fill="rgb(220,193,23)" fg:x="64301" fg:w="38"/><text x="93.6632%" y="111.50"></text></g><g><title>rex`alloc::raw_vec::finish_grow (29 samples, 0.04%)</title><rect x="93.4263%" y="85" width="0.0421%" height="15" fill="rgb(230,90,52)" fg:x="64310" fg:w="29"/><text x="93.6763%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (29 samples, 0.04%)</title><rect x="93.4263%" y="69" width="0.0421%" height="15" fill="rgb(252,106,19)" fg:x="64310" fg:w="29"/><text x="93.6763%" y="79.50"></text></g><g><title>rex`&lt;alloc::string::String as core::fmt::Write&gt;::write_char (44 samples, 0.06%)</title><rect x="93.4060%" y="117" width="0.0639%" height="15" fill="rgb(206,74,20)" fg:x="64296" fg:w="44"/><text x="93.6560%" y="127.50"></text></g><g><title>rex`&lt;primitive_types::H160 as core::fmt::LowerHex&gt;::fmt (1,878 samples, 2.73%)</title><rect x="90.7663%" y="181" width="2.7283%" height="15" fill="rgb(230,138,44)" fg:x="62479" fg:w="1878"/><text x="91.0163%" y="191.50">re..</text></g><g><title>rex`core::fmt::write (1,731 samples, 2.51%)</title><rect x="90.9799%" y="165" width="2.5147%" height="15" fill="rgb(235,182,43)" fg:x="62626" fg:w="1731"/><text x="91.2299%" y="175.50">re..</text></g><g><title>rex`core::fmt::num::_&lt;impl core::fmt::LowerHex for i8&gt;::fmt (1,355 samples, 1.97%)</title><rect x="91.5261%" y="149" width="1.9685%" height="15" fill="rgb(242,16,51)" fg:x="63002" fg:w="1355"/><text x="91.7761%" y="159.50">r..</text></g><g><title>rex`core::fmt::Formatter::pad_integral (67 samples, 0.10%)</title><rect x="93.3973%" y="133" width="0.0973%" height="15" fill="rgb(248,9,4)" fg:x="64290" fg:w="67"/><text x="93.6473%" y="143.50"></text></g><g><title>rex`core::fmt::Formatter::pad_integral::write_prefix (8 samples, 0.01%)</title><rect x="93.4830%" y="117" width="0.0116%" height="15" fill="rgb(210,31,22)" fg:x="64349" fg:w="8"/><text x="93.7330%" y="127.50"></text></g><g><title>rex`alloc::fmt::format::format_inner (1,959 samples, 2.85%)</title><rect x="90.7227%" y="213" width="2.8459%" height="15" fill="rgb(239,54,39)" fg:x="62449" fg:w="1959"/><text x="90.9727%" y="223.50">re..</text></g><g><title>rex`core::fmt::write (1,941 samples, 2.82%)</title><rect x="90.7489%" y="197" width="2.8198%" height="15" fill="rgb(230,99,41)" fg:x="62467" fg:w="1941"/><text x="90.9989%" y="207.50">re..</text></g><g><title>rex`core::fmt::write (51 samples, 0.07%)</title><rect x="93.4946%" y="181" width="0.0741%" height="15" fill="rgb(253,106,12)" fg:x="64357" fg:w="51"/><text x="93.7446%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (17 samples, 0.02%)</title><rect x="93.6733%" y="197" width="0.0247%" height="15" fill="rgb(213,46,41)" fg:x="64480" fg:w="17"/><text x="93.9233%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (23 samples, 0.03%)</title><rect x="93.6980%" y="197" width="0.0334%" height="15" fill="rgb(215,133,35)" fg:x="64497" fg:w="23"/><text x="93.9480%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (53 samples, 0.08%)</title><rect x="93.7357%" y="197" width="0.0770%" height="15" fill="rgb(213,28,5)" fg:x="64523" fg:w="53"/><text x="93.9857%" y="207.50"></text></g><g><title>rex`&lt;[V] as alloc::slice::Concat&lt;T&gt;&gt;::concat (94 samples, 0.14%)</title><rect x="93.8142%" y="197" width="0.1366%" height="15" fill="rgb(215,77,49)" fg:x="64577" fg:w="94"/><text x="94.0642%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (23 samples, 0.03%)</title><rect x="93.9173%" y="181" width="0.0334%" height="15" fill="rgb(248,100,22)" fg:x="64648" fg:w="23"/><text x="94.1673%" y="191.50"></text></g><g><title>rex`&lt;tiny_keccak::keccak::Keccak as tiny_keccak::Hasher&gt;::finalize (25 samples, 0.04%)</title><rect x="93.9508%" y="197" width="0.0363%" height="15" fill="rgb(208,67,9)" fg:x="64671" fg:w="25"/><text x="94.2008%" y="207.50"></text></g><g><title>rex`&lt;tiny_keccak::keccak::Keccak as tiny_keccak::Hasher&gt;::update (68 samples, 0.10%)</title><rect x="93.9871%" y="197" width="0.0988%" height="15" fill="rgb(219,133,21)" fg:x="64696" fg:w="68"/><text x="94.2371%" y="207.50"></text></g><g><title>rex`DYLD-STUB$$memcpy (9 samples, 0.01%)</title><rect x="94.0888%" y="197" width="0.0131%" height="15" fill="rgb(246,46,29)" fg:x="64766" fg:w="9"/><text x="94.3388%" y="207.50"></text></g><g><title>rex`rex_sdk::create::compute_create2_address (1,429 samples, 2.08%)</title><rect x="93.5716%" y="213" width="2.0760%" height="15" fill="rgb(246,185,52)" fg:x="64410" fg:w="1429"/><text x="93.8216%" y="223.50">r..</text></g><g><title>rex`tiny_keccak::keccakf::keccakf (1,057 samples, 1.54%)</title><rect x="94.1120%" y="197" width="1.5356%" height="15" fill="rgb(252,136,11)" fg:x="64782" fg:w="1057"/><text x="94.3620%" y="207.50"></text></g><g><title>rex`&lt;rayon::iter::find::FindFolder&lt;T,P&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume (3,521 samples, 5.12%)</title><rect x="90.5484%" y="229" width="5.1151%" height="15" fill="rgb(219,138,53)" fg:x="62329" fg:w="3521"/><text x="90.7984%" y="239.50">rex`&lt;r..</text></g><g><title>rex`tiny_keccak::keccak::Keccak::v256 (11 samples, 0.02%)</title><rect x="95.6476%" y="213" width="0.0160%" height="15" fill="rgb(211,51,23)" fg:x="65839" fg:w="11"/><text x="95.8976%" y="223.50"></text></g><g><title>rex`rand_core::impls::fill_bytes_via_next (30 samples, 0.04%)</title><rect x="95.6752%" y="229" width="0.0436%" height="15" fill="rgb(247,221,28)" fg:x="65858" fg:w="30"/><text x="95.9252%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexwait (2,807 samples, 4.08%)</title><rect x="95.7870%" y="197" width="4.0779%" height="15" fill="rgb(251,222,45)" fg:x="65935" fg:w="2807"/><text x="96.0370%" y="207.50">libs..</text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (2,864 samples, 4.16%)</title><rect x="95.7275%" y="213" width="4.1607%" height="15" fill="rgb(217,162,53)" fg:x="65894" fg:w="2864"/><text x="95.9775%" y="223.50">libsy..</text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_wait (16 samples, 0.02%)</title><rect x="99.8649%" y="197" width="0.0232%" height="15" fill="rgb(229,93,14)" fg:x="68742" fg:w="16"/><text x="100.1149%" y="207.50"></text></g><g><title>rex`&lt;&amp;rayon::iter::par_bridge::IterParallelProducer&lt;Iter&gt; as rayon::iter::plumbing::UnindexedProducer&gt;::fold_with (8,574 samples, 12.46%)</title><rect x="87.5340%" y="245" width="12.4559%" height="15" fill="rgb(209,67,49)" fg:x="60254" fg:w="8574"/><text x="87.7840%" y="255.50">rex`&lt;&amp;rayon::iter::..</text></g><g><title>rex`std::sys::pal::unix::sync::mutex::Mutex::lock (2,935 samples, 4.26%)</title><rect x="95.7260%" y="229" width="4.2638%" height="15" fill="rgb(213,87,29)" fg:x="65893" fg:w="2935"/><text x="95.9760%" y="239.50">rex`s..</text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (70 samples, 0.10%)</title><rect x="99.8881%" y="213" width="0.1017%" height="15" fill="rgb(205,151,52)" fg:x="68758" fg:w="70"/><text x="100.1381%" y="223.50"></text></g><g><title>all (68,835 samples, 100%)</title><rect x="0.0000%" y="581" width="100.0000%" height="15" fill="rgb(253,215,39)" fg:x="0" fg:w="68835"/><text x="0.2500%" y="591.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (68,833 samples, 100.00%)</title><rect x="0.0029%" y="565" width="99.9971%" height="15" fill="rgb(221,220,41)" fg:x="2" fg:w="68833"/><text x="0.2529%" y="575.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (68,833 samples, 100.00%)</title><rect x="0.0029%" y="549" width="99.9971%" height="15" fill="rgb(218,133,21)" fg:x="2" fg:w="68833"/><text x="0.2529%" y="559.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>rex`std::sys::pal::unix::thread::Thread::new::thread_start (68,832 samples, 100.00%)</title><rect x="0.0044%" y="533" width="99.9956%" height="15" fill="rgb(221,193,43)" fg:x="3" fg:w="68832"/><text x="0.2544%" y="543.50">rex`std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>rex`core::ops::function::FnOnce::call_once{{vtable.shim}} (68,832 samples, 100.00%)</title><rect x="0.0044%" y="517" width="99.9956%" height="15" fill="rgb(240,128,52)" fg:x="3" fg:w="68832"/><text x="0.2544%" y="527.50">rex`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>rex`std::sys::backtrace::__rust_begin_short_backtrace (68,832 samples, 100.00%)</title><rect x="0.0044%" y="501" width="99.9956%" height="15" fill="rgb(253,114,12)" fg:x="3" fg:w="68832"/><text x="0.2544%" y="511.50">rex`std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>rex`rayon_core::registry::ThreadBuilder::run (68,832 samples, 100.00%)</title><rect x="0.0044%" y="485" width="99.9956%" height="15" fill="rgb(215,223,47)" fg:x="3" fg:w="68832"/><text x="0.2544%" y="495.50">rex`rayon_core::registry::ThreadBuilder::run</text></g><g><title>rex`rayon_core::registry::WorkerThread::wait_until_cold (68,832 samples, 100.00%)</title><rect x="0.0044%" y="469" width="99.9956%" height="15" fill="rgb(248,225,23)" fg:x="3" fg:w="68832"/><text x="0.2544%" y="479.50">rex`rayon_core::registry::WorkerThread::wait_until_cold</text></g><g><title>rex`&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (68,832 samples, 100.00%)</title><rect x="0.0044%" y="453" width="99.9956%" height="15" fill="rgb(250,108,0)" fg:x="3" fg:w="68832"/><text x="0.2544%" y="463.50">rex`&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute</text></g><g><title>rex`rayon_core::join::join_context::_{{closure}} (8,582 samples, 12.47%)</title><rect x="87.5325%" y="437" width="12.4675%" height="15" fill="rgb(228,208,7)" fg:x="60253" fg:w="8582"/><text x="87.7825%" y="447.50">rex`rayon_core::joi..</text></g><g><title>rex`rayon::iter::plumbing::bridge_unindexed_producer_consumer (8,582 samples, 12.47%)</title><rect x="87.5325%" y="421" width="12.4675%" height="15" fill="rgb(244,45,10)" fg:x="60253" fg:w="8582"/><text x="87.7825%" y="431.50">rex`rayon::iter::pl..</text></g><g><title>rex`rayon_core::join::join_context::_{{closure}} (8,582 samples, 12.47%)</title><rect x="87.5325%" y="405" width="12.4675%" height="15" fill="rgb(207,125,25)" fg:x="60253" fg:w="8582"/><text x="87.7825%" y="415.50">rex`rayon_core::joi..</text></g><g><title>rex`rayon::iter::plumbing::bridge_unindexed_producer_consumer (8,582 samples, 12.47%)</title><rect x="87.5325%" y="389" width="12.4675%" height="15" fill="rgb(210,195,18)" fg:x="60253" fg:w="8582"/><text x="87.7825%" y="399.50">rex`rayon::iter::pl..</text></g><g><title>rex`rayon_core::join::join_context::_{{closure}} (8,582 samples, 12.47%)</title><rect x="87.5325%" y="373" width="12.4675%" height="15" fill="rgb(249,80,12)" fg:x="60253" fg:w="8582"/><text x="87.7825%" y="383.50">rex`rayon_core::joi..</text></g><g><title>rex`rayon::iter::plumbing::bridge_unindexed_producer_consumer (8,582 samples, 12.47%)</title><rect x="87.5325%" y="357" width="12.4675%" height="15" fill="rgb(221,65,9)" fg:x="60253" fg:w="8582"/><text x="87.7825%" y="367.50">rex`rayon::iter::pl..</text></g><g><title>rex`rayon_core::join::join_context::_{{closure}} (8,582 samples, 12.47%)</title><rect x="87.5325%" y="341" width="12.4675%" height="15" fill="rgb(235,49,36)" fg:x="60253" fg:w="8582"/><text x="87.7825%" y="351.50">rex`rayon_core::joi..</text></g><g><title>rex`rayon::iter::plumbing::bridge_unindexed_producer_consumer (8,582 samples, 12.47%)</title><rect x="87.5325%" y="325" width="12.4675%" height="15" fill="rgb(225,32,20)" fg:x="60253" fg:w="8582"/><text x="87.7825%" y="335.50">rex`rayon::iter::pl..</text></g><g><title>rex`rayon_core::join::join_context::_{{closure}} (8,582 samples, 12.47%)</title><rect x="87.5325%" y="309" width="12.4675%" height="15" fill="rgb(215,141,46)" fg:x="60253" fg:w="8582"/><text x="87.7825%" y="319.50">rex`rayon_core::joi..</text></g><g><title>rex`rayon::iter::plumbing::bridge_unindexed_producer_consumer (8,582 samples, 12.47%)</title><rect x="87.5325%" y="293" width="12.4675%" height="15" fill="rgb(250,160,47)" fg:x="60253" fg:w="8582"/><text x="87.7825%" y="303.50">rex`rayon::iter::pl..</text></g><g><title>rex`rayon_core::join::join_context::_{{closure}} (8,582 samples, 12.47%)</title><rect x="87.5325%" y="277" width="12.4675%" height="15" fill="rgb(216,222,40)" fg:x="60253" fg:w="8582"/><text x="87.7825%" y="287.50">rex`rayon_core::joi..</text></g><g><title>rex`rayon::iter::plumbing::bridge_unindexed_producer_consumer (8,582 samples, 12.47%)</title><rect x="87.5325%" y="261" width="12.4675%" height="15" fill="rgb(234,217,39)" fg:x="60253" fg:w="8582"/><text x="87.7825%" y="271.50">rex`rayon::iter::pl..</text></g></svg></svg>